{"version":3,"sources":["components/EatsMap/index.js","components/EatsMap/leafletMap.js","App.js","index.js"],"names":["Map","loadMap","_this","markerGroup","Leaflet","layerGroup","addTo","map","props","data","forEach","location","marker","latitude","longitude","popupContent","concat","name","address","breakfast","lunch","dinner","dessert","bindPopup","on","openPopup","closePopup","this","dragging","Browser","mobile","center","zoom","tileLayer","minZoom","nextProps","removeLayer","react_default","a","createElement","id","style","width","height","margin","React","Component","App","className","EatsMap","PLACES","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"+6CACeA,6MCuCbC,QAAU,WACRC,EAAKC,YAAcC,IAAQC,aAAaC,MAAMJ,EAAKK,KAEnDL,EAAKM,MAAMC,KAAKC,QAAQ,SAACC,GACvB,IAAIC,EAASR,IAAQQ,OAAO,CAACD,EAASE,SAAUF,EAASG,YAErDC,EAAY,8BAAAC,OAEVL,EAASM,KAFC,sBAAAD,OAGVL,EAASO,QAHC,uCAAAF,OAKVL,EAASQ,UAAY,aAAc,GALzB,gBAAAH,OAMVL,EAASS,MAAQ,SAAU,GANjB,gBAAAJ,OAOVL,EAASU,OAAS,UAAW,GAPnB,gBAAAL,OAQVL,EAASW,QAAU,WAAY,GARrB,4BAYhBV,EAAOW,UAAUR,GACjBH,EAAOY,GAAG,YAAa,kBAAMZ,EAAOa,cACpCb,EAAOY,GAAG,WAAY,kBAAMZ,EAAOc,eACnCd,EAAOY,GAAG,QAAS,kBAAMZ,EAAOa,cAChCb,EAAON,MAAMJ,EAAKC,mGApDpBwB,KAAKpB,IAAMH,IAAQG,IAAI,MAAO,CAC5BqB,UAAWxB,IAAQyB,QAAQC,OAC3BC,OAAQ,CAAC,OAAU,OACnBC,KAAM,KAcR5B,IAAQ6B,UAJN,iGACc,CACdC,QAAS,KAEgC5B,MAAMqB,KAAKpB,KACtDoB,KAAK1B,wDAGekC,GACpB,OAAOA,EAAU1B,OAASkB,KAAKnB,MAAMC,kDAIrCkB,KAAKpB,IAAI6B,YAAYT,KAAKxB,aAC1BwB,KAAK1B,2CA8BL,OAAOoC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,MAAMC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,OAAQC,OAAQ,sBA3DvDC,IAAMC,mBCyBTC,kaAbX,OAAOV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACpBX,EAAAC,EAAAC,cAAA,UAAQS,UAAU,cAChBX,EAAAC,EAAAC,cAAA,MAAIS,UAAU,aAAd,iBAEFX,EAAAC,EAAAC,cAAA,KAAGS,UAAU,aAAb,uOAGAX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACU,EAAD,CAAKxC,KAAMyC,YAvBCJ,aCAlBK,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.29d537ed.chunk.js","sourcesContent":["import Map from './leafletMap.js';\r\nexport default Map;\r\n","/*\r\n * NOTE: the leaflet map config is managed in public/index.html\r\n */\r\n\r\nimport React from 'react';\r\nimport Leaflet from 'leaflet';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Map extends React.Component {\r\n  componentDidMount() {    \r\n    this.map = Leaflet.map('map', {\r\n      dragging: !Leaflet.Browser.mobile,\r\n      center: [41.8500, -87.6500],\r\n      zoom: 11,\r\n    });\r\n    /*\r\n     *  some provider URLs:\r\n     *  Cartoon-Like with detailed zooms: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}'\r\n     *  Sattelite view with detailed zooms: 'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\r\n     *  Darker Cartoon-Like, no detailed zoom: 'https://server.arcgisonline.com/ArcGIS/rest/services/Ocean_Basemap/MapServer/tile/{z}/{y}/{x}'\r\n     *\r\n     */\r\n    const mapProviderURL =\r\n      'https://server.arcgisonline.com/ArcGIS/rest/services/World_Topo_Map/MapServer/tile/{z}/{y}/{x}';\r\n    const options = {\r\n      minZoom: 10,\r\n    };\r\n    Leaflet.tileLayer(mapProviderURL, options).addTo(this.map);\r\n    this.loadMap();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return nextProps.data !== this.props.data;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.map.removeLayer(this.markerGroup);\r\n    this.loadMap();\r\n  }\r\n\r\n  loadMap = () => {\r\n    this.markerGroup = Leaflet.layerGroup().addTo(this.map);\r\n\r\n    this.props.data.forEach((location) => {\r\n      let marker = Leaflet.marker([location.latitude, location.longitude]);\r\n\r\n      let popupContent = `\r\n        <div>\r\n          ${location.name} <br/>\r\n          ${location.address}<br/>\r\n          Type: \r\n          ${location.breakfast ? 'Breakfast ': ''}\r\n          ${location.lunch ? 'Lunch ': ''}\r\n          ${location.dinner ? 'Dinner ': ''}\r\n          ${location.dessert ? 'Dessert ': ''}\r\n        </div>\r\n      `;\r\n\r\n      marker.bindPopup(popupContent);\r\n      marker.on('mouseover', () => marker.openPopup());\r\n      marker.on('mouseout', () => marker.closePopup());\r\n      marker.on('click', () => marker.openPopup());\r\n      marker.addTo(this.markerGroup);\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return <div id=\"map\" style={{ width: '80vw', height: '80vh', margin: '32px auto' }} />;\r\n  }\r\n}\r\n\r\nMap.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Map;","import React, { Component } from 'react'\nimport './App.css'\nimport Map from 'components/EatsMap'\nimport PLACES from './places.json'\n\nclass App extends Component {\n  async componentDidMount() {\n    // DEPRECATED\n    // const HOST = process.env.NODE_ENV == 'production'\n    //   ? process.env.REACT_APP_FETCH_HOST\n    //   : 'localhost:5000'\n    // let response = await fetch(HOST)\n    // let json = await response.json()\n    \n    // this.setState({\n    //   data: json,\n    // });\n  }\n\n  render() {\n    return <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Chicago Eats</h1>\n      </header>\n      <p className=\"App-intro\">\n        This is just a map of good restaurants in my hometown of Chicago that I have been to.  I have a hard time coming up with recommendations for people, so this is used to quickly pull up places to recommend to anyone that asks me.\n      </p>\n      <br/>\n      <Map data={PLACES}/>\n    </div>\n  }\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}